theme_bw() +
theme(legend.position="none") +
geom_text_repel(aes(label=ifelse(max_haplotype_shared > 0.3 & pop_assignment != "D" & Hawaiian == T,
as.character(isotype),'')),hjust=-2,vjust=.2, size = 2)
max_hap_sharing_plot_chrom
ancestry.colours <- c("A"="gold2", "B"="plum4","C"= "darkorange1",
"D"="lightskyblue2", "E"="firebrick","F"= "burlywood3", "G"="gray51",
"H"="springgreen4", "I"="lightpink2", "J"="deepskyblue4", "WHOLE_POPULATION"="black",
"K"="mediumpurple4","L"= "orange","M"= "maroon","N"= "yellow3","O"= "brown4",
"P"="yellow4", "Q"="sienna4", "R"="chocolate", "S"="gray19")
max_hap_sharing_plot_chrom_all_pops <- ggplot(admix_sharing_all) +
aes(x = factor(pop_assignment, levels = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K")), y = max_haplotype_shared, fill = factor(pop_assignment, levels = c("A", "B", "D", "E", "C", "F", "G"))) +
scale_fill_manual(values=c(ancestry.colours)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.25, size = 1.5, shape = ifelse(admix_sharing_all$Hawaiian == T, 21, 25)) +
facet_wrap(~chromosome, scales = "free") +
labs(y = "Fraction most common global haplotype", x = "Ancestral population") +
theme_bw() +
theme(legend.position="none") +
geom_text(aes(label=ifelse(max_haplotype_shared > 0.15 & pop_assignment %in% c("E", "A", "H", "F"),
as.character(isotype),'')),hjust=1,vjust=.2, size = 2)
max_hap_sharing_plot_chrom_all_pops
View(admix_sharing_all)
ancestry.colours <- c("A"="gold2", "B"="plum4","C"= "darkorange1",
"D"="lightskyblue2", "E"="firebrick","F"= "burlywood3", "G"="gray51",
"H"="springgreen4", "I"="lightpink2", "J"="deepskyblue4", "WHOLE_POPULATION"="black",
"K"="mediumpurple4","L"= "orange","M"= "maroon","N"= "yellow3","O"= "brown4",
"P"="yellow4", "Q"="sienna4", "R"="chocolate", "S"="gray19")
ancestry.colours <- c("A"="gold2", "B"="plum4","C"= "darkorange1",
"D"="lightskyblue2", "E"="firebrick","F"= "burlywood3", "G"="gray51",
"H"="springgreen4", "I"="lightpink2", "J"="deepskyblue4", "WHOLE_POPULATION"="black",
"K"="mediumpurple4","L"= "orange","M"= "maroon","N"= "yellow3","O"= "brown4",
"P"="yellow4", "Q"="sienna4", "R"="chocolate", "S"="gray19")
max_hap_sharing_plot_chrom_all_pops <- ggplot(admix_sharing_all) +
aes(x = factor(pop_assignment, levels = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K")), y = max_haplotype_shared, fill = factor(pop_assignment, levels = c("A", "B", "D", "E", "C", "F", "G"))) +
scale_fill_manual(values=c(ancestry.colours)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.25, size = 1.5, shape = ifelse(admix_sharing_all$Hawaiian == T, 21, 25)) +
facet_wrap(~chromosome, scales = "free") +
labs(y = "Fraction most common global haplotype", x = "Ancestral population") +
theme_bw() +
theme(legend.position="none") +
geom_text(aes(label=ifelse(max_haplotype_shared > 0.15 & pop_assignment %in% c("E", "A", "H", "F"),
as.character(isotype),'')),hjust=1,vjust=.2, size = 2)
max_hap_sharing_plot_chrom_all_pops
max_hap_sharing_plot_chrom_all_pops <- ggplot(admix_sharing_all) +
aes(x = factor(pop_assignment, levels = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K")), y = max_haplotype_shared, fill = factor(pop_assignment, levels = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K"))) +
scale_fill_manual(values=c(ancestry.colours)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.25, size = 1.5, shape = ifelse(admix_sharing_all$Hawaiian == T, 21, 25)) +
facet_wrap(~chromosome, scales = "free") +
labs(y = "Fraction most common global haplotype", x = "Ancestral population") +
theme_bw() +
theme(legend.position="none") +
geom_text(aes(label=ifelse(max_haplotype_shared > 0.15 & pop_assignment %in% c("E", "A", "H", "F"),
as.character(isotype),'')),hjust=1,vjust=.2, size = 2)
max_hap_sharing_plot_chrom_all_pops
max_hap_sharing_plot_chrom <- ggplot(admix_sharing) +
aes(x = factor(pop_assignment, levels = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K")), y = max_haplotype_shared, fill = factor(pop_assignment, levels = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K"))) +
scale_fill_manual(values=c(ancestry.colours)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.25, size = 1.5, shape = ifelse(admix_sharing$Hawaiian == T, 21, 25)) +
facet_wrap(~chromosome, scales = "free") +
labs(y = "Fraction most common global haplotype", x = "Ancestral population") +
theme_bw() +
theme(legend.position="none") +
geom_text_repel(aes(label=ifelse(max_haplotype_shared > 0.3 & pop_assignment != "D" & Hawaiian == T,
as.character(isotype),'')),hjust=-2,vjust=.2, size = 2)
max_hap_sharing_plot_chrom
max_hap_sharing_plot_genome <- ggplot(admix_sharing %>% dplyr::distinct(isotype, .keep_all=T)) +
aes(x = factor(pop_assignment, levels = c("D", "C", "F", "G")), y = genome_frac_swept, fill = factor(pop_assignment, levels = c("D", "C", "F", "G"))) +
scale_fill_manual(values=c(ancestry.colours)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1, size = 2, shape = ifelse(admix_sharing %>% dplyr::distinct(isotype, .keep_all=T) %>% .$Hawaiian == T, 21, 25)) +
labs(y = "Fraction of genome swept haplotype", x = "Ancestral population") +
theme_bw() +
theme(legend.position="none") +
geom_text_repel(aes(label=ifelse(genome_frac_swept > 0.2 & pop_assignment != "D" & Hawaiian == T,as.character(isotype),'')),hjust=-1,vjust=.2, size = 3)
max_hap_sharing_plot_genome
max_hap_sharing_plot_genome <- ggplot(admix_sharing %>% dplyr::distinct(isotype, .keep_all=T)) +
aes(x = factor(pop_assignment, levels = c("A", "C", "E", "F", "H")), y = genome_frac_swept, fill = factor(pop_assignment, levels = c("A", "C", "E", "F", "H"))) +
scale_fill_manual(values=c(ancestry.colours)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1, size = 2, shape = ifelse(admix_sharing %>% dplyr::distinct(isotype, .keep_all=T) %>% .$Hawaiian == T, 21, 25)) +
labs(y = "Fraction of genome swept haplotype", x = "Ancestral population") +
theme_bw() +
theme(legend.position="none") +
geom_text_repel(aes(label=ifelse(genome_frac_swept > 0.2 & pop_assignment != "C" & Hawaiian == T,as.character(isotype),'')),hjust=-1,vjust=.2, size = 3)
max_hap_sharing_plot_genome
ggsave(paste("plots/max_hap_sharing_genome_K=11_LD8_HI.png"), width = 3.5, height = 5)
ggsave(paste("plots/max_hap_sharing_genome_K=11_LD8_HI.pdf"), width = 3.5, height = 5)
max_hap_sharing_plot_chrom <- ggplot(admix_sharing) +
aes(x = factor(pop_assignment, levels = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K")), y = max_haplotype_shared, fill = factor(pop_assignment, levels = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K"))) +
scale_fill_manual(values=c(ancestry.colours)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.25, size = 1.5, shape = ifelse(admix_sharing$Hawaiian == T, 21, 25)) +
facet_wrap(~chromosome, scales = "free") +
labs(y = "Fraction most common global haplotype", x = "Ancestral population") +
theme_bw() +
theme(legend.position="none") +
geom_text_repel(aes(label=ifelse(max_haplotype_shared > 0.3 & pop_assignment != "D" & Hawaiian == T,
as.character(isotype),'')),hjust=-2,vjust=.2, size = 2)
max_hap_sharing_plot_chrom
ggsave(paste("plots/max_hap_sharing_chr_K=11_LD8_HI.png"), width = 7.5, height = 7.5)
ggsave(paste("plots/max_hap_sharing_chr_K=11_LD8_HI.pdf"), width = 7.5, height = 7.5)
max_hap_sharing_plot_chrom_all_pops
ggsave(paste("plots/max_hap_sharing_chr_K=11_LD8.png"), width = 7.5, height = 7.5)
ggsave(paste("plots/max_hap_sharing_chr_K=11_LD8.pdf"), width = 7.5, height = 7.5)
options(scipen=999)
admix_sharing_anlaysis <- admix_sharing %>%
distinct(isotype, .keep_all= TRUE) %>%
dplyr::mutate(pop_assignment = factor(pop_assignment, levels = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K")))
D_test <- dunnTest(data =admix_sharing_anlaysis, genome_frac_swept~pop_assignment, method = "bonferroni")
D_test[[2]]
fraction_admix_population_hawaiian <- admix_sharing_all %>%
dplyr::distinct(isotype, pop_assignment, .keep_all = T) %>%
dplyr::group_by(pop_assignment) %>%
dplyr::mutate(num_isotypes_in_pop = n(),
num_hi_isotypes_in_pop = sum(Hawaiian == "TRUE"),
fraction_hi = num_hi_isotypes_in_pop/num_isotypes_in_pop,
fraction_world = 1-fraction_hi) %>%
dplyr::select(pop_assignment, fraction_hi, fraction_world, num_isotypes_in_pop, num_hi_isotypes_in_pop) %>%
dplyr::distinct(pop_assignment, .keep_all=T) %>%
tidyr::gather(group, value, -pop_assignment, -num_isotypes_in_pop, -num_hi_isotypes_in_pop)
admix_fractions_pie_chart <- ggplot(fraction_admix_population_hawaiian, aes(x="", y=value, fill=group))+
geom_bar(width = 1, stat = "identity") +
facet_wrap(~pop_assignment) +
coord_polar("y", start=0) +
labs(y = "", x = "", fill = "") +
theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
axis.text.x=element_blank()) +
geom_text(aes(x=1, y = value, label=ifelse(group == "fraction_hi", num_hi_isotypes_in_pop, num_isotypes_in_pop-num_hi_isotypes_in_pop)))
admix_fractions_pie_chart
mcolor_grp <- plot_df %>% dplyr::select(haplotype, color) %>% dplyr::distinct()
mcolor <- mcolor_grp$color
names(mcolor) <- mcolor_grp$haplotype
mcolor_grp_hi <- hap_admix_df_ordered %>%
dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "C") %>%
dplyr::select(haplotype, color) %>% dplyr::distinct()
hap_admix_df_ordered <- hap_admix_df %>%
dplyr::filter(Hawaiian == "TRUE" | pop_assignment == "C") %>%
dplyr::arrange(desc(pop_assignment), plotpoint) %>%
dplyr::mutate(pop_assignment = factor(pop_assignment, levels = c("C", "E",  "A", "F", "G")))
plotpoints <- hap_admix_df_ordered %>%
dplyr::distinct(pop_assignment, isotype) %>%
dplyr::mutate(pop_assignment = factor(pop_assignment, levels = c("C", "E",  "A", "F", "G"))) %>%
dplyr::arrange(pop_assignment) %>%
dplyr::mutate(plotpoint_hi = row_number())
hap_admix_df_ordered <- dplyr::left_join(hap_admix_df_ordered, plotpoints) %>%
dplyr::mutate(filter = ifelse(plotpoint_hi %in% seq(10, 99, by=1), TRUE, FALSE)) %>%
dplyr::filter(filter != TRUE) %>%
dplyr::mutate(plotpoint_hi = ifelse(plotpoint_hi > 10, plotpoint_hi-89, plotpoint_hi))
mcolor_grp_hi <- hap_admix_df_ordered %>%
dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "C") %>%
dplyr::select(haplotype, color) %>% dplyr::distinct()
mcolor_hi <- hap_admix_df_ordered$color
names(mcolor_hi) <- mcolor_grp_hi$haplotype
strain_labels_hi <- hap_admix_df_ordered %>%
dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "C") %>%
dplyr::select(isotype, plotpoint_hi)
ggplot(hap_admix_df_ordered %>% dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "C"),
aes(xmin = start/1E6, xmax = stop/1E6,
ymin = plotpoint_hi - 0.5, ymax = plotpoint_hi + 0.5,
fill = haplotype)) +
geom_rect() +
scale_fill_manual(values = mcolor) +
scale_y_continuous(breaks = unique(strain_labels_hi$plotpoint_hi),
labels = unique(strain_labels_hi$isotype),
expand = c(0, 0)) +
xlab("Position (Mb)") +
theme_bw() +
facet_grid(factor(pop_assignment, levels=c("C", "E",  "A", "F", "G"))~chromosome, scales="free", space="free") +
theme(legend.position="none")
View(strain_labels_hi)
View(hap_admix_df_ordered)
View(hap_admix_df_ordered)
View(plotpoints)
hap_admix_df_ordered <- hap_admix_df %>%
dplyr::filter(Hawaiian == "TRUE" | pop_assignment == "C") %>%
dplyr::arrange(desc(pop_assignment), plotpoint) %>%
dplyr::mutate(pop_assignment = factor(pop_assignment, levels = c("C", "E",  "A", "F", "H")))
plotpoints <- hap_admix_df_ordered %>%
dplyr::distinct(pop_assignment, isotype) %>%
dplyr::mutate(pop_assignment = factor(pop_assignment, levels = c("C", "E",  "A", "F", "H"))) %>%
dplyr::arrange(pop_assignment) %>%
dplyr::mutate(plotpoint_hi = row_number())
View(plotpoints)
hap_admix_df_ordered <- dplyr::left_join(hap_admix_df_ordered, plotpoints) #%>%
mcolor_grp_hi <- hap_admix_df_ordered %>%
dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "C") %>%
dplyr::select(haplotype, color) %>% dplyr::distinct()
mcolor_hi <- hap_admix_df_ordered$color
names(mcolor_hi) <- mcolor_grp_hi$haplotype
strain_labels_hi <- hap_admix_df_ordered %>%
dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "C") %>%
dplyr::select(isotype, plotpoint_hi)
ggplot(hap_admix_df_ordered %>% dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "C"),
aes(xmin = start/1E6, xmax = stop/1E6,
ymin = plotpoint_hi - 0.5, ymax = plotpoint_hi + 0.5,
fill = haplotype)) +
geom_rect() +
scale_fill_manual(values = mcolor) +
scale_y_continuous(breaks = unique(strain_labels_hi$plotpoint_hi),
labels = unique(strain_labels_hi$isotype),
expand = c(0, 0)) +
xlab("Position (Mb)") +
theme_bw() +
facet_grid(factor(pop_assignment, levels=c("C", "E",  "A", "F", "G"))~chromosome, scales="free", space="free") +
theme(legend.position="none")
ggplot(hap_admix_df_ordered %>% dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "C"),
aes(xmin = start/1E6, xmax = stop/1E6,
ymin = plotpoint_hi - 0.5, ymax = plotpoint_hi + 0.5,
fill = haplotype)) +
geom_rect() +
scale_fill_manual(values = mcolor) +
scale_y_continuous(breaks = unique(strain_labels_hi$plotpoint_hi),
labels = unique(strain_labels_hi$isotype),
expand = c(0, 0)) +
xlab("Position (Mb)") +
theme_bw() +
facet_grid(factor(pop_assignment, levels=c("H", "F", "A", "E", "C"))~chromosome, scales="free", space="free") +
theme(legend.position="none")
ggsave("plots/haplotype_admix_order_K=11_LD8.png", height = 10, width = 10)
ggsave("plots/haplotype_admix_order_K=11_LD8.pdf", height = 10, width = 10)
mcolor_grp_hi <- hap_admix_df_ordered %>%
dplyr::filter(Hawaiian == "TRUE") %>%
dplyr::select(haplotype, color) %>%
dplyr::distinct() %>%
dplyr::mutate(color = ifelse(color == "#CC0000", color, "grey"))
mcolor_hi <- mcolor_grp_hi$color
names(mcolor_hi) <- mcolor_grp_hi$haplotype
ggplot(hap_admix_df_ordered %>% dplyr::filter(Hawaiian == "TRUE"),
aes(xmin = start/1E6, xmax = stop/1E6,
ymin = plotpoint_hi - 0.5, ymax = plotpoint_hi + 0.5,
fill = haplotype)) +
geom_rect() +
scale_fill_manual(values = mcolor_hi) +
scale_y_continuous(breaks = unique(strain_labels_hi$plotpoint_hi),
labels = unique(strain_labels_hi$isotype),
expand = c(0, 0)) +
xlab("Position (Mb)") +
theme_bw() +
facet_grid(.~chromosome, scales="free", space="free") +
theme(legend.position="none")
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
load("data/HAPLOTYPE_LD8/haplotype_plot_df.Rda")
get_group_number = function(){
i = 0
function(){
i <<- i+1
i
}
}
group_number = get_group_number()
strain_islands <- c("XZ1514" = "#E69F00", "XZ1516" = "#E69F00","XZ1513" = "#E69F00","ECA372" = "#E69F00","ECA701" = "#E69F00","XZ1515" = "#E69F00",
"CB4856" = "#56B4E9","ECA928" = "#56B4E9","ECA923" = "#56B4E9",
"ECA369" = "#009E73","ECA738" = "#009E73",
"QX1792" = "#0072B2", "QX1794" = "#0072B2", "QX1793" = "#0072B2", "QX1791" = "#0072B2", "ECA740" = "#0072B2", "ECA741" = "#0072B2", "ECA363" = "#0072B2", "ECA743" = "#0072B2", "ECA742" = "#0072B2",
"ECA760" = "#CC79A7","ECA768" = "#CC79A7","ECA777" = "#CC79A7","ECA706" = "#CC79A7","ECA705" = "#CC79A7","ECA703" = "#CC79A7","ECA807" = "#CC79A7","ECA778" = "#CC79A7",
"ECA812" = "#CC79A7","ECA710" = "#CC79A7","ECA744" = "#CC79A7","ECA745" = "#CC79A7","ECA732" = "#CC79A7","ECA733" = "#CC79A7","ECA746" = "#CC79A7","DL238" = "#CC79A7",
"ECA347" = "#CC79A7","ECA730" = "#CC79A7","ECA724" = "#CC79A7","ECA722" = "#CC79A7","ECA189" = "#CC79A7","ECA191" = "#CC79A7","ECA723" = "#CC79A7","ECA712" = "#CC79A7",
"ECA396" = "#CC79A7")
mcolor_grp <- plot_df %>% dplyr::select(haplotype, color) %>% dplyr::distinct()
mcolor <- mcolor_grp$color
names(mcolor) <- mcolor_grp$haplotype
strain_labels <- plot_df %>%
dplyr::select(isotype, plotpoint)
pr_plot_df <- plot_df %>%
dplyr::filter(isotype %in% names(strain_islands)) %>%
dplyr::group_by(chromosome, isotype) %>%
dplyr::mutate(total_swept_haplotype = sum(isotype_swept_haplotype_length, na.rm = T)) %>%
dplyr::ungroup() %>%
dplyr::arrange(desc(total_swept_haplotype), plotpoint) %>%
dplyr::mutate(f_isotype = factor(isotype, levels = unique(isotype))) %>%
dplyr::group_by(f_isotype) %>%
dplyr::mutate(plot_order = group_number()) %>%
dplyr::ungroup()
pr_plot_df%>%
ggplot(.,
aes(xmin = start/1E6, xmax = stop/1E6,
ymin = plot_order - 0.5, ymax = plot_order + 0.5,
fill = haplotype)) +
geom_rect() +
scale_fill_manual(values = mcolor) +
scale_y_continuous(breaks = pr_plot_df$plot_order,
labels = pr_plot_df$isotype,
expand = c(0, 0)) +
xlab("Position (Mb)") +
theme_bw() +
facet_grid(.~chromosome, scales="free", space="free") +
theme(legend.position="none",
strip.background.x = element_blank())
library(tidyverse)
pr_plot_df <- plot_df %>%
dplyr::filter(isotype %in% names(strain_islands)) %>%
dplyr::group_by(chromosome, isotype) %>%
dplyr::mutate(total_swept_haplotype = sum(isotype_swept_haplotype_length, na.rm = T)) %>%
dplyr::ungroup() %>%
dplyr::arrange(desc(total_swept_haplotype), plotpoint) %>%
dplyr::mutate(f_isotype = factor(isotype, levels = unique(isotype))) %>%
dplyr::group_by(f_isotype) %>%
dplyr::mutate(plot_order = group_number()) %>%
dplyr::ungroup()
pr_plot_df
pr_plot_df%>%
ggplot(.,
aes(xmin = start/1E6, xmax = stop/1E6,
ymin = plot_order - 0.5, ymax = plot_order + 0.5,
fill = haplotype)) +
geom_rect() +
scale_fill_manual(values = mcolor) +
scale_y_continuous(breaks = pr_plot_df$plot_order,
labels = pr_plot_df$isotype,
expand = c(0, 0)) +
xlab("Position (Mb)") +
theme_bw() +
facet_grid(.~chromosome, scales="free", space="free") +
theme(legend.position="none",
strip.background.x = element_blank())
pr_plot_df%>%
ggplot(.,
aes(xmin = start/1E6, xmax = stop/1E6,
ymin = plot_order - 0.5, ymax = plot_order + 0.5,
fill = haplotype)) +
geom_rect() +
scale_fill_manual(values = mcolor) +
scale_y_continuous(breaks = pr_plot_df$plot_order,
labels = pr_plot_df$isotype,
expand = c(0, 0)) +
xlab("Position (Mb)") +
theme_bw() +
facet_grid(.~chromosome, scales="free", space="free") +
theme(legend.position="none")
K = 11
outgroup_strain <- "ECA191"
sample_names <- sort(data.table::fread("data/ANNOTATE_VCF/samples.txt", header = F) %>% dplyr::pull(V1))
pfile_name <- grep(pattern = glue::glue("{K}\\.P$"), value = T, x = list.files("data/ADMIXTURE_LD8_K12/BEST_K/"))
pfile <- pophelper::readQ(files = paste0("data/ADMIXTURE_LD8_K12/BEST_K/",pfile_name))[[1]]
colnames(pfile) <- LETTERS[1:K]
treemix_input <- apply(pfile, MARGIN = c(1,2), function(x){
f <- round(x*length(sample_names),digits = 0)
paste(length(sample_names)-f, f, sep = ",")
})
qfile_name <- grep(pattern = glue::glue("{K}\\.Q$"), value = T, x = list.files("data/ADMIXTURE_LD8_K12/BEST_K/"))
qfile <- pophelper::readQ(files = paste0("data/ADMIXTURE_LD8_K12/BEST_K/",qfile_name))[[1]]
colnames(qfile) <- LETTERS[1:K]
qfile$strain <- sample_names
outgroup_population <- qfile%>%
dplyr::filter(strain == outgroup_strain)%>%
tidyr::gather(Population, Frequency, -strain)%>%
dplyr::filter(Frequency == max(Frequency))
write.table(x = treemix_input,
file = glue::glue("data/ADMIXTURE_LD8_K12/K-{K}_Outgroup={outgroup_population$Population[1]}=TREEMIX_input.txt"),
quote = F,
col.names = T,
row.names = F)
treemix_input_name <- strsplit(glue::glue("data/ADMIXTURE_LD8_K12/K-{K}_Outgroup={outgroup_population$Population[1]}=TREEMIX_input.txt"),
split = "/")[[1]][3]
strsplit(glue::glue("data/ADMIXTURE_LD8_K12/K-{K}_Outgroup={outgroup_population$Population[1]}=TREEMIX_input.txt"),
split = "/")[[1]][3]
system(glue::glue("gzip data/ADMIXTURE_LD8_K12/{treemix_input_name}"))
outgroup_pop <- outgroup_population$Population[1]
output_name <- strsplit(strsplit(glue::glue("data/ADMIXTURE_LD8_K12/K-{K}_Outgroup={outgroup_population$Population[1]}=TREEMIX_input.txt"),
split = "/")[[1]][3], split = "\\.txt")[[1]][1]
system(glue::glue("treemix -i data/ADMIXTURE_LD8_K12/{treemix_input_name}.gz -o data/ADMIXTURE_LD8_K12/{output_name} -root {outgroup_pop} -k 500"))
source("scripts/PLOT_TREEMIX.R")
system(glue::glue("gzip data/ADMIXTURE_LD8_K12/{treemix_input_name}"))
library(tidyverse)
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
load("data/HAPLOTYPE_LD8/haplotype_plot_df.Rda")
get_group_number = function(){
i = 0
function(){
i <<- i+1
i
}
}
group_number = get_group_number()
strain_islands <- c("XZ1514" = "#E69F00", "XZ1516" = "#E69F00","XZ1513" = "#E69F00","ECA372" = "#E69F00","ECA701" = "#E69F00","XZ1515" = "#E69F00",
"CB4856" = "#56B4E9","ECA928" = "#56B4E9","ECA923" = "#56B4E9",
"ECA369" = "#009E73","ECA738" = "#009E73",
"QX1792" = "#0072B2", "QX1794" = "#0072B2", "QX1793" = "#0072B2", "QX1791" = "#0072B2", "ECA740" = "#0072B2", "ECA741" = "#0072B2", "ECA363" = "#0072B2", "ECA743" = "#0072B2", "ECA742" = "#0072B2",
"ECA760" = "#CC79A7","ECA768" = "#CC79A7","ECA777" = "#CC79A7","ECA706" = "#CC79A7","ECA705" = "#CC79A7","ECA703" = "#CC79A7","ECA807" = "#CC79A7","ECA778" = "#CC79A7",
"ECA812" = "#CC79A7","ECA710" = "#CC79A7","ECA744" = "#CC79A7","ECA745" = "#CC79A7","ECA732" = "#CC79A7","ECA733" = "#CC79A7","ECA746" = "#CC79A7","DL238" = "#CC79A7",
"ECA347" = "#CC79A7","ECA730" = "#CC79A7","ECA724" = "#CC79A7","ECA722" = "#CC79A7","ECA189" = "#CC79A7","ECA191" = "#CC79A7","ECA723" = "#CC79A7","ECA712" = "#CC79A7",
"ECA396" = "#CC79A7")
K = 11
outgroup_strain <- "ECA191"
sample_names <- sort(data.table::fread("data/ANNOTATE_VCF/samples.txt", header = F) %>% dplyr::pull(V1))
pfile_name <- grep(pattern = glue::glue("{K}\\.P$"), value = T, x = list.files("data/ADMIXTURE_LD8_K12/BEST_K/"))
pfile <- pophelper::readQ(files = paste0("data/ADMIXTURE_LD8_K12/BEST_K/",pfile_name))[[1]]
colnames(pfile) <- LETTERS[1:K]
treemix_input <- apply(pfile, MARGIN = c(1,2), function(x){
f <- round(x*length(sample_names),digits = 0)
paste(length(sample_names)-f, f, sep = ",")
})
qfile_name <- grep(pattern = glue::glue("{K}\\.Q$"), value = T, x = list.files("data/ADMIXTURE_LD8_K12/BEST_K/"))
qfile <- pophelper::readQ(files = paste0("data/ADMIXTURE_LD8_K12/BEST_K/",qfile_name))[[1]]
colnames(qfile) <- LETTERS[1:K]
qfile$strain <- sample_names
outgroup_population <- qfile%>%
dplyr::filter(strain == outgroup_strain)%>%
tidyr::gather(Population, Frequency, -strain)%>%
dplyr::filter(Frequency == max(Frequency))
write.table(x = treemix_input,
file = glue::glue("data/ADMIXTURE_LD8_K12/K-{K}_Outgroup={outgroup_population$Population[1]}=TREEMIX_input.txt"),
quote = F,
col.names = T,
row.names = F)
treemix_input_name <- strsplit(glue::glue("data/ADMIXTURE_LD8_K12/K-{K}_Outgroup={outgroup_population$Population[1]}=TREEMIX_input.txt"),
split = "/")[[1]][3]
system(glue::glue("gzip data/ADMIXTURE_LD8_K12/{treemix_input_name}"))
outgroup_pop <- outgroup_population$Population[1]
output_name <- strsplit(strsplit(glue::glue("data/ADMIXTURE_LD8_K12/K-{K}_Outgroup={outgroup_population$Population[1]}=TREEMIX_input.txt"),
split = "/")[[1]][3], split = "\\.txt")[[1]][1]
system(glue::glue("treemix -i data/ADMIXTURE_LD8_K12/{treemix_input_name}.gz -o data/ADMIXTURE_LD8_K12/{output_name} -root {outgroup_pop} -k 500"))
source("scripts/PLOT_TREEMIX.R")
system(paste0(paste0("printf \"", paste(LETTERS[1:K], collapse = '\n')), '\n\" > data/ADMIXTURE_LD8_K12/poporder'))
treemix_stem <- glue::glue("data/ADMIXTURE_LD8_K12/{output_name}")
pdf(glue::glue("plots/K{K}_TREEMIX_phylogeny_NO_MIGRATION.pdf"))
plot_tree(stem = treemix_stem)
dev.off()
pdf(glue::glue("plots/K{K}_TREEMIX_phylogeny_NO_MIGRATION_Residuals.pdf"))
plot_resid(stem = treemix_stem, "data/ADMIXTURE_LD8_K12/poporder")
dev.off()
setwd(treemix.dir)
dir.create("migrations")
for(m in 1:4){
system(glue::glue("treemix -i data/ADMIXTURE_LD8_K12/{treemix_input_name}.gz -o data/ADMIXTURE_LD8_K12/{output_name}_{m} -root {outgroup_pop} -k 500 -m {m} -se"))
}
for(migration in gsub("\\.llik","",grep(glue::glue("K-{K}"), grep("llik",list.files("data/ADMIXTURE_LD8_K12/"),value = T), value = T))){
system(paste0(paste0("printf \"", paste(LETTERS[1:K], collapse = '\n')), '\n\" > data/ADMIXTURE_LD8_k12/poporder'))
pdf(glue::glue("plots/TREEMIX_phylogeny_{migration}_migrations.pdf"))
plot_tree(stem =  glue::glue("data/ADMIXTURE_LD8_K12/{migration}"))
dev.off()
pdf(glue::glue("plots/TREEMIX_phylogeny_{migration}_migrations_RESIDUALS.pdf"))
plot_resid(stem = glue::glue("data/ADMIXTURE_LD8_K12/{migration}"), "data/ADMIXTURE_LD8_K12/poporder")
dev.off()
#
}
for(m in 1:5){
system(glue::glue("treemix -i data/ADMIXTURE_LD8_K12/{treemix_input_name}.gz -o data/ADMIXTURE_LD8_K12/{output_name}_{m} -root {outgroup_pop} -k 500 -m {m} -se"))
}
for(migration in gsub("\\.llik","",grep(glue::glue("K-{K}"), grep("llik",list.files("data/ADMIXTURE_LD8_K12/"),value = T), value = T))){
system(paste0(paste0("printf \"", paste(LETTERS[1:K], collapse = '\n')), '\n\" > data/ADMIXTURE_LD8_k12/poporder'))
pdf(glue::glue("plots/TREEMIX_phylogeny_{migration}_migrations.pdf"))
plot_tree(stem =  glue::glue("data/ADMIXTURE_LD8_K12/{migration}"))
dev.off()
pdf(glue::glue("plots/TREEMIX_phylogeny_{migration}_migrations_RESIDUALS.pdf"))
plot_resid(stem = glue::glue("data/ADMIXTURE_LD8_K12/{migration}"), "data/ADMIXTURE_LD8_K12/poporder")
dev.off()
#
}
outgroup_strain <- "XZ1516"
sample_names <- sort(data.table::fread("data/ANNOTATE_VCF/samples.txt", header = F) %>% dplyr::pull(V1))
pfile_name <- grep(pattern = glue::glue("{K}\\.P$"), value = T, x = list.files("data/ADMIXTURE_LD8_K12/BEST_K/"))
pfile <- pophelper::readQ(files = paste0("data/ADMIXTURE_LD8_K12/BEST_K/",pfile_name))[[1]]
colnames(pfile) <- LETTERS[1:K]
treemix_input <- apply(pfile, MARGIN = c(1,2), function(x){
f <- round(x*length(sample_names),digits = 0)
paste(length(sample_names)-f, f, sep = ",")
})
qfile_name <- grep(pattern = glue::glue("{K}\\.Q$"), value = T, x = list.files("data/ADMIXTURE_LD8_K12/BEST_K/"))
qfile <- pophelper::readQ(files = paste0("data/ADMIXTURE_LD8_K12/BEST_K/",qfile_name))[[1]]
colnames(qfile) <- LETTERS[1:K]
qfile$strain <- sample_names
outgroup_population <- qfile%>%
dplyr::filter(strain == outgroup_strain)%>%
tidyr::gather(Population, Frequency, -strain)%>%
dplyr::filter(Frequency == max(Frequency))
write.table(x = treemix_input,
file = glue::glue("data/ADMIXTURE_LD8_K12/K-{K}_Outgroup={outgroup_population$Population[1]}=TREEMIX_input.txt"),
quote = F,
col.names = T,
row.names = F)
treemix_input_name <- strsplit(glue::glue("data/ADMIXTURE_LD8_K12/K-{K}_Outgroup={outgroup_population$Population[1]}=TREEMIX_input.txt"),
split = "/")[[1]][3]
system(glue::glue("gzip data/ADMIXTURE_LD8_K12/{treemix_input_name}"))
outgroup_pop <- outgroup_population$Population[1]
output_name <- strsplit(strsplit(glue::glue("data/ADMIXTURE_LD8_K12/K-{K}_Outgroup={outgroup_population$Population[1]}=TREEMIX_input.txt"),
split = "/")[[1]][3], split = "\\.txt")[[1]][1]
system(glue::glue("treemix -i data/ADMIXTURE_LD8_K12/{treemix_input_name}.gz -o data/ADMIXTURE_LD8_K12/{output_name} -root {outgroup_pop} -k 500"))
source("scripts/PLOT_TREEMIX.R")
system(paste0(paste0("printf \"", paste(LETTERS[1:K], collapse = '\n')), '\n\" > data/ADMIXTURE_LD8_K12/poporder'))
treemix_stem <- glue::glue("data/ADMIXTURE_LD8_K12/{output_name}")
pdf(glue::glue("plots/K{K}_TREEMIX_phylogeny_NO_MIGRATION.pdf"))
plot_tree(stem = treemix_stem)
dev.off()
pdf(glue::glue("plots/K{K}_TREEMIX_phylogeny_NO_MIGRATION_Residuals.pdf"))
plot_resid(stem = treemix_stem, "data/ADMIXTURE_LD8_K12/poporder")
dev.off()
setwd(treemix.dir)
dir.create("migrations")
for(m in 1:5){
system(glue::glue("treemix -i data/ADMIXTURE_LD8_K12/{treemix_input_name}.gz -o data/ADMIXTURE_LD8_K12/{output_name}_{m} -root {outgroup_pop} -k 500 -m {m} -se"))
}
for(migration in gsub("\\.llik","",grep(glue::glue("K-{K}"), grep("llik",list.files("data/ADMIXTURE_LD8_K12/"),value = T), value = T))){
system(paste0(paste0("printf \"", paste(LETTERS[1:K], collapse = '\n')), '\n\" > data/ADMIXTURE_LD8_k12/poporder'))
pdf(glue::glue("plots/TREEMIX_phylogeny_{migration}_migrations.pdf"))
plot_tree(stem =  glue::glue("data/ADMIXTURE_LD8_K12/{migration}"))
dev.off()
pdf(glue::glue("plots/TREEMIX_phylogeny_{migration}_migrations_RESIDUALS.pdf"))
plot_resid(stem = glue::glue("data/ADMIXTURE_LD8_K12/{migration}"), "data/ADMIXTURE_LD8_K12/poporder")
dev.off()
#
}
