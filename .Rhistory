facet_grid(factor(pop_assignment, levels=c("F","G","C", "D"))~chromosome, scales="free", space="free") +
theme(legend.position="none")
mcolor_grp <- plot_df %>% dplyr::select(haplotype, color) %>% dplyr::distinct()
mcolor <- mcolor_grp$color
names(mcolor) <- mcolor_grp$haplotype
hap_admix_df_ordered <- hap_admix_df %>%
dplyr::filter(Hawaiian == "TRUE" | pop_assignment == "D") %>%
dplyr::arrange(desc(pop_assignment), plotpoint) %>%
dplyr::mutate(pop_assignment = factor(pop_assignment, levels = c("D", "C",  "G", "F")))
plotpoints <- hap_admix_df_ordered %>%
dplyr::distinct(pop_assignment, isotype) %>%
dplyr::mutate(pop_assignment = factor(pop_assignment, levels = c("D", "C",  "G", "F"))) %>%
dplyr::arrange(pop_assignment) %>%
dplyr::mutate(plotpoint_hi = row_number())
hap_admix_df_ordered <- dplyr::left_join(hap_admix_df_ordered, plotpoints) %>%
dplyr::mutate(filter = ifelse(plotpoint_hi %in% seq(10, 99, by=1), TRUE, FALSE)) %>%
dplyr::filter(filter != TRUE) %>%
dplyr::mutate(plotpoint_hi = ifelse(plotpoint_hi > 10, plotpoint_hi-100, plotpoint_hi))
mcolor_grp_hi <- hap_admix_df_ordered %>%
dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "B") %>%
dplyr::select(haplotype, color) %>% dplyr::distinct()
mcolor_hi <- hap_admix_df_ordered$color
names(mcolor_hi) <- mcolor_grp_hi$haplotype
strain_labels_hi <- hap_admix_df_ordered %>%
dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "D") %>%
dplyr::select(isotype, plotpoint_hi)
ggplot(hap_admix_df_ordered %>% dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "D"),
aes(xmin = start/1E6, xmax = stop/1E6,
ymin = plotpoint_hi - 0.5, ymax = plotpoint_hi + 0.5,
fill = haplotype)) +
geom_rect() +
scale_fill_manual(values = mcolor) +
scale_y_continuous(breaks = unique(strain_labels_hi$plotpoint_hi),
labels = unique(strain_labels_hi$isotype),
expand = c(0, 0)) +
xlab("Position (Mb)") +
theme_bw() +
facet_grid(factor(pop_assignment, levels=c("F","G","C", "D"))~chromosome, scales="free", space="free") +
theme(legend.position="none")
mcolor_grp <- plot_df %>% dplyr::select(haplotype, color) %>% dplyr::distinct()
mcolor <- mcolor_grp$color
names(mcolor) <- mcolor_grp$haplotype
hap_admix_df_ordered <- hap_admix_df %>%
dplyr::filter(Hawaiian == "TRUE" | pop_assignment == "D") %>%
dplyr::arrange(desc(pop_assignment), plotpoint) %>%
dplyr::mutate(pop_assignment = factor(pop_assignment, levels = c("D", "C",  "G", "F")))
plotpoints <- hap_admix_df_ordered %>%
dplyr::distinct(pop_assignment, isotype) %>%
dplyr::mutate(pop_assignment = factor(pop_assignment, levels = c("D", "C",  "G", "F"))) %>%
dplyr::arrange(pop_assignment) %>%
dplyr::mutate(plotpoint_hi = row_number())
hap_admix_df_ordered <- dplyr::left_join(hap_admix_df_ordered, plotpoints) %>%
dplyr::mutate(filter = ifelse(plotpoint_hi %in% seq(10, 99, by=1), TRUE, FALSE)) %>%
dplyr::filter(filter != TRUE) %>%
dplyr::mutate(plotpoint_hi = ifelse(plotpoint_hi > 10, plotpoint_hi-90, plotpoint_hi))
mcolor_grp_hi <- hap_admix_df_ordered %>%
dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "B") %>%
dplyr::select(haplotype, color) %>% dplyr::distinct()
mcolor_hi <- hap_admix_df_ordered$color
names(mcolor_hi) <- mcolor_grp_hi$haplotype
strain_labels_hi <- hap_admix_df_ordered %>%
dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "D") %>%
dplyr::select(isotype, plotpoint_hi)
ggplot(hap_admix_df_ordered %>% dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "D"),
aes(xmin = start/1E6, xmax = stop/1E6,
ymin = plotpoint_hi - 0.5, ymax = plotpoint_hi + 0.5,
fill = haplotype)) +
geom_rect() +
scale_fill_manual(values = mcolor) +
scale_y_continuous(breaks = unique(strain_labels_hi$plotpoint_hi),
labels = unique(strain_labels_hi$isotype),
expand = c(0, 0)) +
xlab("Position (Mb)") +
theme_bw() +
facet_grid(factor(pop_assignment, levels=c("F","G","C", "D"))~chromosome, scales="free", space="free") +
theme(legend.position="none")
hap_admix_df_ordered <- dplyr::left_join(hap_admix_df_ordered, plotpoints) %>%
dplyr::mutate(filter = ifelse(plotpoint_hi %in% seq(10, 99, by=1), TRUE, FALSE)) %>%
dplyr::filter(filter != TRUE) %>%
dplyr::mutate(plotpoint_hi = ifelse(plotpoint_hi > 10, plotpoint_hi-88, plotpoint_hi))
mcolor_grp <- plot_df %>% dplyr::select(haplotype, color) %>% dplyr::distinct()
mcolor <- mcolor_grp$color
names(mcolor) <- mcolor_grp$haplotype
hap_admix_df_ordered <- hap_admix_df %>%
dplyr::filter(Hawaiian == "TRUE" | pop_assignment == "D") %>%
dplyr::arrange(desc(pop_assignment), plotpoint) %>%
dplyr::mutate(pop_assignment = factor(pop_assignment, levels = c("D", "C",  "G", "F")))
plotpoints <- hap_admix_df_ordered %>%
dplyr::distinct(pop_assignment, isotype) %>%
dplyr::mutate(pop_assignment = factor(pop_assignment, levels = c("D", "C",  "G", "F"))) %>%
dplyr::arrange(pop_assignment) %>%
dplyr::mutate(plotpoint_hi = row_number())
hap_admix_df_ordered <- dplyr::left_join(hap_admix_df_ordered, plotpoints) %>%
dplyr::mutate(filter = ifelse(plotpoint_hi %in% seq(10, 99, by=1), TRUE, FALSE)) %>%
dplyr::filter(filter != TRUE) %>%
dplyr::mutate(plotpoint_hi = ifelse(plotpoint_hi > 10, plotpoint_hi-88, plotpoint_hi))
mcolor_grp_hi <- hap_admix_df_ordered %>%
dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "B") %>%
dplyr::select(haplotype, color) %>% dplyr::distinct()
mcolor_hi <- hap_admix_df_ordered$color
names(mcolor_hi) <- mcolor_grp_hi$haplotype
strain_labels_hi <- hap_admix_df_ordered %>%
dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "D") %>%
dplyr::select(isotype, plotpoint_hi)
ggplot(hap_admix_df_ordered %>% dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "D"),
aes(xmin = start/1E6, xmax = stop/1E6,
ymin = plotpoint_hi - 0.5, ymax = plotpoint_hi + 0.5,
fill = haplotype)) +
geom_rect() +
scale_fill_manual(values = mcolor) +
scale_y_continuous(breaks = unique(strain_labels_hi$plotpoint_hi),
labels = unique(strain_labels_hi$isotype),
expand = c(0, 0)) +
xlab("Position (Mb)") +
theme_bw() +
facet_grid(factor(pop_assignment, levels=c("F","G","C", "D"))~chromosome, scales="free", space="free") +
theme(legend.position="none")
mcolor_grp <- plot_df %>% dplyr::select(haplotype, color) %>% dplyr::distinct()
mcolor <- mcolor_grp$color
names(mcolor) <- mcolor_grp$haplotype
hap_admix_df_ordered <- hap_admix_df %>%
dplyr::filter(Hawaiian == "TRUE" | pop_assignment == "D") %>%
dplyr::arrange(desc(pop_assignment), plotpoint) %>%
dplyr::mutate(pop_assignment = factor(pop_assignment, levels = c("D", "C",  "G", "F")))
plotpoints <- hap_admix_df_ordered %>%
dplyr::distinct(pop_assignment, isotype) %>%
dplyr::mutate(pop_assignment = factor(pop_assignment, levels = c("D", "C",  "G", "F"))) %>%
dplyr::arrange(pop_assignment) %>%
dplyr::mutate(plotpoint_hi = row_number())
hap_admix_df_ordered <- dplyr::left_join(hap_admix_df_ordered, plotpoints) %>%
dplyr::mutate(filter = ifelse(plotpoint_hi %in% seq(10, 99, by=1), TRUE, FALSE)) %>%
dplyr::filter(filter != TRUE) %>%
dplyr::mutate(plotpoint_hi = ifelse(plotpoint_hi > 10, plotpoint_hi-89, plotpoint_hi))
mcolor_grp_hi <- hap_admix_df_ordered %>%
dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "B") %>%
dplyr::select(haplotype, color) %>% dplyr::distinct()
mcolor_hi <- hap_admix_df_ordered$color
names(mcolor_hi) <- mcolor_grp_hi$haplotype
strain_labels_hi <- hap_admix_df_ordered %>%
dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "D") %>%
dplyr::select(isotype, plotpoint_hi)
ggplot(hap_admix_df_ordered %>% dplyr::filter(Hawaiian == "TRUE"| pop_assignment == "D"),
aes(xmin = start/1E6, xmax = stop/1E6,
ymin = plotpoint_hi - 0.5, ymax = plotpoint_hi + 0.5,
fill = haplotype)) +
geom_rect() +
scale_fill_manual(values = mcolor) +
scale_y_continuous(breaks = unique(strain_labels_hi$plotpoint_hi),
labels = unique(strain_labels_hi$isotype),
expand = c(0, 0)) +
xlab("Position (Mb)") +
theme_bw() +
facet_grid(factor(pop_assignment, levels=c("F","G","C", "D"))~chromosome, scales="free", space="free") +
theme(legend.position="none")
ggsave("plots/haplotype_admix_order_K=7_LD8.png", height = 10, width = 10)
ggsave("plots/haplotype_admix_order_K=7_LD8.pdf", height = 10, width = 10)
ggsave("plots/haplotype_admix_order_K=7_LD8.png", height = 10, width = 10)
ggsave("plots/haplotype_admix_order_K=7_LD8.pdf", height = 10, width = 10)
max_hap_sharing_plot_genome <- ggplot(admix_sharing %>% dplyr::distinct(isotype, .keep_all=T)) +
aes(x = factor(pop_assignment, levels = c("D", "C", "F", "G")), y = genome_frac_swept, fill = factor(pop_assignment, levels = c("D", "C", "F", "G"))) +
scale_fill_manual(values=c(ancestry.colours)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1, size = 3, shape = ifelse(admix_sharing %>% dplyr::distinct(isotype, .keep_all=T) %>% .$Hawaiian == T, 21, 25)) +
labs(y = "Fraction of genome swept haplotype", x = "Ancestral population") +
theme_bw() +
theme(legend.position="none") +
geom_text_repel(aes(label=ifelse(genome_frac_swept > 0.15 & pop_assignment != "D" & Hawaiian == T,as.character(isotype),'')),hjust=-1,vjust=.2, size = 3)
max_hap_sharing_plot_genome
ggsave(paste("plots/max_hap_sharing_genome_K=7_LD8_HI.png"), width = 5, height = 5)
ggsave(paste("plots/max_hap_sharing_genome_K=7_LD8_HI.pdf"), width = 5, height = 5)
test <- hap_admix_df %>%
distinct(isotype, .keep_all = T)
test <- hap_admix_df %>%
distinct(isotype, .keep_all = T) %>%
dplyr::filter(Hawaiian = T)
test <- hap_admix_df %>%
distinct(isotype, .keep_all = T) %>%
dplyr::filter(Hawaiian == T)
test <- cso %>%
dplyr::filter(spp_id %in% c("C. elegans", "C. briggsae", "C. sp. 53", "C. kamaaina", "C. tropicalis"))
View(test)
test <- cso %>%
dplyr::filter(spp_id %in% c("C. elegans", "C. briggsae", "C. sp. 53", "C. kamaaina", "C. tropicalis")) %>%
dplyr::group_by(spp_id) %>%
dplyr::mutate(sp_count = n()) %>%
dplyr::select(isotype, s_label, latitude, longitude, spp_id, sp_count)
View(test)
library(tidyverse)
library(DT)
library(cowplot)
library(FSA)
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
load('data/fulcrum/df.Rda')
species_palette <- c("C. elegans" = "#BE0032", #7
"C. sp. 53" =  "#875692", #4
"C. tropicalis" = "#F38400", #5
"Panagrolaimus sp." = "#C2B280", #8
"Oscheius sp." = "#F3C300", #3
"C. briggsae" = "#A1CAF1", #6
"Other PCR +" = "#008856", #10
"Caenorhabditis" = "#C2B280", #8
"PCR -" = "#848482", #9
"Not genotyped" = "#F2F3F4", #1
"No Worm" = "#222222", #2
"multiple" = "#FFFFFF")
stat_df <- cso %>%
dplyr::filter(pcr_rhpositive == 1) %>%
dplyr::mutate(species_family = ifelse(spp_id %in% c("Panagrolaimus sp.",
"Oscheius sp.",
"Chabertia ovina",
"Choriorhabditis cristata",
"Choriorhabditis sp.",
"Heterhabditis zealandica",
"Mesorhabditis sp.",
"no match",
"C. kamaaina",
"Rhabditis terricola",
"Rhanditis tericola",
"Teratorhabditis sp.",
"Unknown",
"unknown",
NA),
"PCR +", spp_id)) %>%
dplyr::filter(species_family != "PCR +") %>%
dplyr::distinct(c_label, spp_id, .keep_all = T) %>%
dplyr::select(c_label, s_label, species_family, substrate_temperature, substrate_moisture, ambient_humidity,
ambient_temperature, altitude) %>%
dplyr::mutate(species_family = forcats::as_factor(species_family),
species_family = forcats::fct_relevel(species_family,
"C. elegans",
"C. sp. 53",
"C. tropicalis",
"C. briggsae")) %>%
tidyr::gather(env_par, value, substrate_temperature, substrate_moisture, ambient_humidity, ambient_temperature, altitude)%>%
dplyr::group_by(env_par) %>%
dplyr::mutate(KM_pvalue = kruskal.test(value ~ species_family)[[3]])
Dunn_list <- list()
for (e in 1:length(unique(stat_df$env_par))){
KM_df <- stat_df %>%
dplyr::filter(env_par == (unique(stat_df$env_par)[e]))
D_test <- dunnTest(KM_df$value ~ KM_df$species_family, method = "bonferroni")
Dunn_list[[unique(stat_df$env_par)[e]]] <- D_test
}
plot_atemp <- ggplot(data = stat_df %>% dplyr::filter(env_par == "ambient_temperature")) +
geom_boxplot(aes(x = species_family, y = value, fill = species_family), outlier.color = NA) +
scale_fill_manual(values=c(species_palette)) +
geom_jitter(aes(x = species_family, y = value), size = .5, width = .25) +
theme_bw() +
theme(axis.title = element_text(size = 10, color = "black"),
axis.text = element_text(size = 10, color = "black")) +
labs(fill = "Species", x = "", y = "Ambient temperature (°C)") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position="none")
plot_stemp <- ggplot(data = stat_df %>% dplyr::filter(env_par == "substrate_temperature")) +
geom_boxplot(aes(x = species_family, y = value, fill = species_family), outlier.color = NA) +
scale_fill_manual(values=c(species_palette)) +
geom_jitter(aes(x = species_family, y = value), size = .5, width = .25) +
theme_bw() +
theme(axis.title = element_text(size = 10, color = "black"),
axis.text = element_text(size = 10, color = "black")) +
labs(fill = "Species", x = "", y = "Substrate temperature (°C)") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position="none")
plot_ahum <- ggplot(data = stat_df %>% dplyr::filter(env_par == "ambient_humidity")) +
geom_boxplot(aes(x = species_family, y = value, fill = species_family), outlier.color = NA) +
scale_fill_manual(values=c(species_palette)) +
geom_jitter(aes(x = species_family, y = value), size = .5, width = .25) +
theme_bw() +
theme(axis.title = element_text(size = 10, color = "black"),
axis.text = element_text(size = 10, color = "black")) +
labs(fill = "Species", x = "", y = "Ambient humidity (%)") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position="none")
plot_smoist <- ggplot(data = stat_df %>% dplyr::filter(env_par == "substrate_moisture")) +
geom_boxplot(aes(x = species_family, y = value, fill = species_family), outlier.color = NA) +
scale_fill_manual(values=c(species_palette)) +
geom_jitter(aes(x = species_family, y = value), size = .5, width = .25) +
theme_bw() +
theme(axis.title = element_text(size = 10, color = "black"),
axis.text = element_text(size = 10, color = "black")) +
labs(fill = "Species", x = "", y = "Substrate moisture (%)") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position="none")
plot_elev <- ggplot(data = stat_df %>% dplyr::filter(env_par == "altitude")) +
geom_boxplot(aes(x = species_family, y = value, fill = species_family), outlier.color = NA) +
scale_fill_manual(values=c(species_palette)) +
geom_jitter(aes(x = species_family, y = value), size = .5, width = .25) +
theme_bw() +
theme(axis.title = element_text(size = 10, color = "black"),
axis.text = element_text(size = 10, color = "black")) +
labs(fill = "Species", x = "", y = "Elevation (m)") +
theme(axis.title.x= element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position="none")
legend <- get_legend(ggplot(stat_df %>% dplyr::filter(env_par == "altitude")) +
geom_bar(aes(x = species_family, fill = species_family)) +
scale_fill_manual(values=c(species_palette)) +
labs(fill = ""))
env_par_box_plots <- cowplot::plot_grid(plot_atemp, plot_stemp, plot_ahum, plot_smoist, plot_elev, legend, labels = c("A", "B", "C", "D", "E", ""), ncol = 2, nrow = 3, align = "hv", axis = "l")
env_par_box_plots
library(GGally)
env_corr <- cso %>%
dplyr::filter(spp_id %in% c("C. elegans", "C. sp. 53", "C. tropicalis", "C. briggsae")) %>%
dplyr::distinct(c_label, spp_id, .keep_all = T) %>%
dplyr::select(spp_id, s_label, substrate_temperature, substrate_moisture, ambient_humidity,
ambient_temperature, altitude) %>%
tibble::column_to_rownames ('s_label')
env_pars_labels <- c(NA, expression("substrate temperature"~degree~"C"), "substrate moisture (%)", "ambient humidity (%)", expression("ambient temperature"~degree~"C"), "altitude (m)")
temp_means <- stat_df %>%
dplyr::filter(env_par == "substrate_temperature")
View(temp_means)
temp_means <- stat_df %>%
dplyr::filter(env_par == "substrate_temperature") %>%
dplyr::group_by(species_family) %>%
dplyr::mutate(means = mean(value))
View(temp_means)
temp_means <- stat_df %>%
dplyr::group_by(env_par, species_family) %>%
dplyr::mutate(means = mean(value))
par_means <- stat_df %>%
dplyr::group_by(env_par, species_family) %>%
dplyr::mutate(means = mean(value))
View(par_means)
par_means <- stat_df %>%
dplyr::group_by(env_par, species_family) %>%
dplyr::mutate(means = mean(value))
View(par_means)
View(temp_means)
library(tidyverse)
library(ggmap)
library(memoise)
library(lubridate)
library(cowplot)
library(pals)
library(grid)
library(gridExtra)
library(DT)
library(FSA)
library(scales)
ancestry.colours <- c("A"="gold2", "B"="plum4","C"= "darkorange1",
"D"="lightskyblue2", "E"="firebrick","F"= "burlywood3", "G"="gray51",
"H"="springgreen4", "I"="lightpink2", "J"="deepskyblue4", "WHOLE_POPULATION"="black",
"L"="mediumpurple4","M"= "orange","N"= "maroon","O"= "yellow3","P"= "brown4",
"Q"="yellow4", "R"="sienna4", "S"="chocolate", "T"="gray19")
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
load('data/fulcrum/df.Rda')
hi_only_samples <- read.csv(file = "data/fulcrum/hawaii_isotypes.csv")
admix <- data.table::fread("data/ADMIXTURE_LD8/BEST_K/K7_Processed_Ancestry.tsv",header = T) %>%
dplyr::rename(isotype = samples) %>%
tidyr::gather(pop, frac_pop, - isotype) %>%
dplyr::group_by(isotype) %>%
dplyr::mutate(max_pop_frac = max(frac_pop)) %>%
dplyr::ungroup() %>%
dplyr::arrange(pop, max_pop_frac) %>%
dplyr::mutate(isotype = factor(isotype)) %>%
dplyr::group_by(isotype) %>%
dplyr::mutate(pop_assignment = ifelse(max_pop_frac == frac_pop, pop, NA)) %>%
dplyr::arrange(isotype, pop_assignment) %>%
tidyr::fill(pop_assignment) %>%
tidyr::spread(pop, frac_pop) %>%
dplyr::ungroup() %>%
dplyr::mutate(Hawaiian = ifelse(isotype %in% hi_only_samples$isotype, "TRUE", "FALSE"))
load("data/HAPLOTYPE_LD8/haplotype_plot_df.Rda")
hap_admix_df <- dplyr::left_join(plot_df, admix)
admix_sharing_all <- hap_admix_df  %>%
distinct(isotype, chromosome, .keep_all= TRUE) %>%
dplyr::group_by(isotype) %>%
dplyr::mutate(genome_swept_hap_length = sum(isotype_swept_haplotype_length),
genome_max_length = sum(max_swept_haplotype_length),
genome_frac_swept = genome_swept_hap_length/genome_max_length) %>%
dplyr::ungroup()
admix_sharing <- hap_admix_df  %>%
dplyr::filter(pop_assignment %in% c("D","C", "F", "G")) %>%
distinct(isotype, chromosome, .keep_all= TRUE) %>%
dplyr::group_by(isotype) %>%
dplyr::mutate(genome_swept_hap_length = sum(isotype_swept_haplotype_length),
genome_max_length = sum(max_swept_haplotype_length),
genome_frac_swept = genome_swept_hap_length/genome_max_length) %>%
dplyr::ungroup()
max_hap_sharing_plot_chrom_all_pops <- ggplot(admix_sharing_all) +
aes(x = factor(pop_assignment, levels = c("A", "B", "D", "E", "C", "F", "G")), y = max_haplotype_shared, fill = factor(pop_assignment, levels = c("A", "B", "D", "E", "C", "F", "G"))) +
scale_fill_manual(values=c(ancestry.colours)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.25, size = 1.5, shape = ifelse(admix_sharing_all$Hawaiian == T, 21, 25)) +
facet_wrap(~chromosome, scales = "free") +
labs(y = "Fraction most common global haplotype", x = "Ancestral population") +
theme_bw() +
theme(legend.position="none") +
geom_text(aes(label=ifelse(max_haplotype_shared > 0.15 & pop_assignment %in% c("C", "F", "G"),
as.character(isotype),'')),hjust=1,vjust=.2, size = 2)
max_hap_sharing_plot_chrom_all_pops
admix_sharing_all <- hap_admix_df  %>%
distinct(isotype, chromosome, .keep_all= TRUE) %>%
dplyr::group_by(isotype) %>%
dplyr::mutate(genome_swept_hap_length = sum(isotype_swept_haplotype_length),
genome_max_length = sum(max_swept_haplotype_length),
genome_frac_swept = genome_swept_hap_length/genome_max_length) %>%
dplyr::ungroup()
admix_sharing <- hap_admix_df  %>%
dplyr::filter(pop_assignment %in% c("D","C", "F", "G")) %>%
distinct(isotype, chromosome, .keep_all= TRUE) %>%
dplyr::group_by(isotype) %>%
dplyr::mutate(genome_swept_hap_length = sum(isotype_swept_haplotype_length),
genome_max_length = sum(max_swept_haplotype_length),
genome_frac_swept = genome_swept_hap_length/genome_max_length) %>%
dplyr::ungroup()
max_hap_sharing_plot_chrom_all_pops <- ggplot(admix_sharing_all) +
aes(x = factor(pop_assignment, levels = c("A", "B", "D", "E", "C", "F", "G")), y = max_haplotype_shared, fill = factor(pop_assignment, levels = c("A", "B", "D", "E", "C", "F", "G"))) +
scale_fill_manual(values=c(ancestry.colours)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.25, size = 1.5, shape = ifelse(admix_sharing_all$Hawaiian == T, 21, 25)) +
facet_wrap(~chromosome, scales = "free") +
labs(y = "Fraction most common global haplotype", x = "Ancestral population") +
theme_bw() +
theme(legend.position="none") +
geom_text(aes(label=ifelse(max_haplotype_shared > 0.15 & pop_assignment %in% c("C", "F", "G"),
as.character(isotype),'')),hjust=1,vjust=.2, size = 2)
max_hap_sharing_plot_chrom <- ggplot(admix_sharing) +
aes(x = factor(pop_assignment, levels = c("D", "C", "F", "G")), y = max_haplotype_shared, fill = factor(pop_assignment, levels = c("D", "C", "F", "G"))) +
scale_fill_manual(values=c(ancestry.colours)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.25, size = 1.5, shape = ifelse(admix_sharing$Hawaiian == T, 21, 25)) +
facet_wrap(~chromosome, scales = "free") +
labs(y = "Fraction most common global haplotype", x = "Ancestral population") +
theme_bw() +
theme(legend.position="none") +
geom_text_repel(aes(label=ifelse(max_haplotype_shared > 0.3 & pop_assignment != "D" & Hawaiian == T,
as.character(isotype),'')),hjust=-2,vjust=.2, size = 2)
max_hap_sharing_plot_chrom
library(tidyverse)
library(ggmap)
library(memoise)
library(lubridate)
library(cowplot)
library(pals)
library(grid)
library(gridExtra)
library(DT)
library(FSA)
library(scales)
ancestry.colours <- c("A"="gold2", "B"="plum4","C"= "darkorange1",
"D"="lightskyblue2", "E"="firebrick","F"= "burlywood3", "G"="gray51",
"H"="springgreen4", "I"="lightpink2", "J"="deepskyblue4", "WHOLE_POPULATION"="black",
"L"="mediumpurple4","M"= "orange","N"= "maroon","O"= "yellow3","P"= "brown4",
"Q"="yellow4", "R"="sienna4", "S"="chocolate", "T"="gray19")
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
load('data/fulcrum/df.Rda')
hi_only_samples <- read.csv(file = "data/fulcrum/hawaii_isotypes.csv")
admix <- data.table::fread("data/ADMIXTURE_LD8/BEST_K/K7_Processed_Ancestry.tsv",header = T) %>%
dplyr::rename(isotype = samples) %>%
tidyr::gather(pop, frac_pop, - isotype) %>%
dplyr::group_by(isotype) %>%
dplyr::mutate(max_pop_frac = max(frac_pop)) %>%
dplyr::ungroup() %>%
dplyr::arrange(pop, max_pop_frac) %>%
dplyr::mutate(isotype = factor(isotype)) %>%
dplyr::group_by(isotype) %>%
dplyr::mutate(pop_assignment = ifelse(max_pop_frac == frac_pop, pop, NA)) %>%
dplyr::arrange(isotype, pop_assignment) %>%
tidyr::fill(pop_assignment) %>%
tidyr::spread(pop, frac_pop) %>%
dplyr::ungroup() %>%
dplyr::mutate(Hawaiian = ifelse(isotype %in% hi_only_samples$isotype, "TRUE", "FALSE"))
length(distinct(plot_df  isotypes))
load("data/HAPLOTYPE_LD8/haplotype_plot_df.Rda")
hap_admix_df <- dplyr::left_join(plot_df, admix)
admix_sharing_all <- hap_admix_df  %>%
distinct(isotype, chromosome, .keep_all= TRUE) %>%
dplyr::group_by(isotype) %>%
dplyr::mutate(genome_swept_hap_length = sum(isotype_swept_haplotype_length),
genome_max_length = sum(max_swept_haplotype_length),
genome_frac_swept = genome_swept_hap_length/genome_max_length) %>%
dplyr::ungroup()
admix_sharing <- hap_admix_df  %>%
dplyr::filter(pop_assignment %in% c("D","C", "F", "G")) %>%
distinct(isotype, chromosome, .keep_all= TRUE) %>%
dplyr::group_by(isotype) %>%
dplyr::mutate(genome_swept_hap_length = sum(isotype_swept_haplotype_length),
genome_max_length = sum(max_swept_haplotype_length),
genome_frac_swept = genome_swept_hap_length/genome_max_length) %>%
dplyr::ungroup()
max_hap_sharing_plot_chrom_all_pops <- ggplot(admix_sharing_all) +
aes(x = factor(pop_assignment, levels = c("A", "B", "D", "E", "C", "F", "G")), y = max_haplotype_shared, fill = factor(pop_assignment, levels = c("A", "B", "D", "E", "C", "F", "G"))) +
scale_fill_manual(values=c(ancestry.colours)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.25, size = 1.5, shape = ifelse(admix_sharing_all$Hawaiian == T, 21, 25)) +
facet_wrap(~chromosome, scales = "free") +
labs(y = "Fraction most common global haplotype", x = "Ancestral population") +
theme_bw() +
theme(legend.position="none") +
geom_text(aes(label=ifelse(max_haplotype_shared > 0.15 & pop_assignment %in% c("C", "F", "G"),
as.character(isotype),'')),hjust=1,vjust=.2, size = 2)
max_hap_sharing_plot_genome <- ggplot(admix_sharing %>% dplyr::distinct(isotype, .keep_all=T)) +
aes(x = factor(pop_assignment, levels = c("D", "C", "F", "G")), y = genome_frac_swept, fill = factor(pop_assignment, levels = c("D", "C", "F", "G"))) +
scale_fill_manual(values=c(ancestry.colours)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1, size = 2, shape = ifelse(admix_sharing %>% dplyr::distinct(isotype, .keep_all=T) %>% .$Hawaiian == T, 21, 25)) +
labs(y = "Fraction of genome swept haplotype", x = "Ancestral population") +
theme_bw() +
theme(legend.position="none") +
geom_text_repel(aes(label=ifelse(genome_frac_swept > 0.15 & pop_assignment != "D" & Hawaiian == T,as.character(isotype),'')),hjust=-1,vjust=.2, size = 3)
max_hap_sharing_plot_genome
View(admix_sharing)
