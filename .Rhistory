axis.text.x = element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
#axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
#plot.background=element_blank(),
plot.margin = unit(c(0,0,0,0), units = "cm"))
elevation_plot
elevation_plot_no_legend <- elevation_plot +
theme(legend.position="none",
plot.margin = unit(c(0,0,0,0), units = "cm"))
elevation_plot_legend <- cowplot::get_legend(elevation_plot)
sub_temp_plot <- ggplot(ass_stats_long %>% tidyr::spread(env_par, value)) +
aes(x = factor(isotype, levels = plot_order$samples), y = substrate_temperature, fill = sub_pop, alpha = filtered) +
scale_fill_manual(values = ancestry.colours) +
geom_jitter(width = 0.1, shape = 21, size = 2.5) +
geom_segment(aes(x=0,xend=26,y=stemp_means[1],yend=stemp_means[1]), color = ancestry.colours["C"], size=0.75) +
geom_segment(aes(x=27,xend=36,y=stemp_means[2],yend=stemp_means[2]), color = ancestry.colours["F"], size=0.75) +
geom_segment(aes(x=37,xend=43,y=stemp_means[3],yend=stemp_means[3]), color = ancestry.colours["G"], size=0.75) +
theme_bw() +
labs(fill = "", x = "", y = "Sub. temperature (ºC)") +
theme(axis.line=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
#axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
#plot.background=element_blank(),
plot.margin = unit(c(0,0,0,0), units = "cm"))
sub_temp_plot_no_legend <- sub_temp_plot +
theme(legend.position="none",
plot.margin = unit(c(0,0,0,0), units = "cm"))
sub_temp_plot_legend <- cowplot::get_legend(sub_temp_plot)
full <- cowplot::plot_grid(admix_plot_no_legend, admix_legend,
elevation_plot_no_legend, admix_legend,
sub_temp_plot_no_legend, admix_legend,
ncol = 2, nrow = 3, align = "vh", rel_heights = c(1,.4,.5), rel_widths =c(1, .25), axis = 'l') #,  axis = 'l'
full
elevation_plot <- ggplot(ass_stats_long %>% tidyr::spread(env_par, value)) +
aes(x = factor(isotype, levels = plot_order$samples), y = altitude, fill = sub_pop) + # alpha = filtered; reveals what data points are filtered out for stats
scale_fill_manual(values = ancestry.colours) +
geom_jitter(width = 0.1, shape = 21, size = 2.5) +
geom_segment(aes(x=0,xend=26,y=elv_means[1],yend=elv_means[1]), color = ancestry.colours["C"], size=0.75) +
geom_segment(aes(x=27,xend=35,y=elv_means[2],yend=elv_means[2]), color = ancestry.colours["F"], size=0.75) +
geom_segment(aes(x=36,xend=43,y=elv_means[3],yend=elv_means[3]), color = ancestry.colours["G"], size=0.75) +
theme_bw() +
labs(fill = "", x = "", y = "Elevation (m)") +
#ylim(800,1200) +
theme(axis.line=element_blank(),
axis.text.x = element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
#axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
#plot.background=element_blank(),
plot.margin = unit(c(0,0,0,0), units = "cm"))
elevation_plot_no_legend <- elevation_plot +
theme(legend.position="none",
plot.margin = unit(c(0,0,0,0), units = "cm"))
elevation_plot_legend <- cowplot::get_legend(elevation_plot)
sub_temp_plot <- ggplot(ass_stats_long %>% tidyr::spread(env_par, value)) +
aes(x = factor(isotype, levels = plot_order$samples), y = substrate_temperature, fill = sub_pop) + #, alpha = filtered
scale_fill_manual(values = ancestry.colours) +
geom_jitter(width = 0.1, shape = 21, size = 2.5) +
geom_segment(aes(x=0,xend=26,y=stemp_means[1],yend=stemp_means[1]), color = ancestry.colours["C"], size=0.75) +
geom_segment(aes(x=27,xend=36,y=stemp_means[2],yend=stemp_means[2]), color = ancestry.colours["F"], size=0.75) +
geom_segment(aes(x=37,xend=43,y=stemp_means[3],yend=stemp_means[3]), color = ancestry.colours["G"], size=0.75) +
theme_bw() +
labs(fill = "", x = "", y = "Sub. temperature (ºC)") +
theme(axis.line=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
#axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
#plot.background=element_blank(),
plot.margin = unit(c(0,0,0,0), units = "cm"))
sub_temp_plot_no_legend <- sub_temp_plot +
theme(legend.position="none",
plot.margin = unit(c(0,0,0,0), units = "cm"))
sub_temp_plot_legend <- cowplot::get_legend(sub_temp_plot)
full <- cowplot::plot_grid(admix_plot_no_legend, admix_legend,
elevation_plot_no_legend, admix_legend,
sub_temp_plot_no_legend, admix_legend,
ncol = 2, nrow = 3, align = "vh", rel_heights = c(1,.4,.5), rel_widths =c(1, .25), axis = 'l') #,  axis = 'l'
full
elv_means <- ass_stats_cont_dist_filtered %>%
dplyr::group_by(evn_par, sub_pop) %>%
dplyr::mutate(population_mean_value = mean(value, na.rm = T))
elv_means <- ass_stats_cont_dist_filtered %>%
dplyr::group_by(env_par, sub_pop) %>%
dplyr::mutate(population_mean_value = mean(value, na.rm = T))
env_means <- ass_stats_cont_dist_filtered %>%
dplyr::group_by(env_par, sub_pop) %>%
dplyr::mutate(population_mean_value = mean(value, na.rm = T))
View(env_means)
env_means <- ass_stats_cont_dist_filtered %>%
dplyr::group_by(env_par, sub_pop) %>%
dplyr::mutate(population_mean_value = mean(value, na.rm = T)) %>%
dplyr::ungroup() %>%
dplyr::distinct(env_par, subpop, population_mean_value)
env_means <- ass_stats_cont_dist_filtered %>%
dplyr::group_by(env_par, sub_pop) %>%
dplyr::mutate(population_mean_value = mean(value, na.rm = T)) %>%
dplyr::ungroup() %>%
dplyr::distinct(env_par, sub_pop, population_mean_value)
View(env_means)
elv_means <- c("c_mean_alt" = 821.83885,
"f_mean_alt" = 1362.78665,
"g_mean_alt" =966.44687)
stemp_means <- c("c_mean_temp" = 20.25000,
"f_mean_temp" = 18.07500,
"g_mean_temp" = 17.92000)
elevation_plot <- ggplot(ass_stats_long %>% tidyr::spread(env_par, value)) +
aes(x = factor(isotype, levels = plot_order$samples), y = altitude, fill = sub_pop) + # alpha = filtered; reveals what data points are filtered out for stats
scale_fill_manual(values = ancestry.colours) +
geom_jitter(width = 0.1, shape = 21, size = 2.5) +
geom_segment(aes(x=0,xend=26,y=elv_means[1],yend=elv_means[1]), color = ancestry.colours["C"], size=0.75) +
geom_segment(aes(x=27,xend=35,y=elv_means[2],yend=elv_means[2]), color = ancestry.colours["F"], size=0.75) +
geom_segment(aes(x=36,xend=43,y=elv_means[3],yend=elv_means[3]), color = ancestry.colours["G"], size=0.75) +
theme_bw() +
labs(fill = "", x = "", y = "Elevation (m)") +
#ylim(800,1200) +
theme(axis.line=element_blank(),
axis.text.x = element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
#axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
#plot.background=element_blank(),
plot.margin = unit(c(0,0,0,0), units = "cm"))
elevation_plot_no_legend <- elevation_plot +
theme(legend.position="none",
plot.margin = unit(c(0,0,0,0), units = "cm"))
elevation_plot_legend <- cowplot::get_legend(elevation_plot)
sub_temp_plot <- ggplot(ass_stats_long %>% tidyr::spread(env_par, value)) +
aes(x = factor(isotype, levels = plot_order$samples), y = substrate_temperature, fill = sub_pop) + #, alpha = filtered
scale_fill_manual(values = ancestry.colours) +
geom_jitter(width = 0.1, shape = 21, size = 2.5) +
geom_segment(aes(x=0,xend=26,y=stemp_means[1],yend=stemp_means[1]), color = ancestry.colours["C"], size=0.75) +
geom_segment(aes(x=27,xend=36,y=stemp_means[2],yend=stemp_means[2]), color = ancestry.colours["F"], size=0.75) +
geom_segment(aes(x=37,xend=43,y=stemp_means[3],yend=stemp_means[3]), color = ancestry.colours["G"], size=0.75) +
theme_bw() +
labs(fill = "", x = "", y = "Sub. temperature (ºC)") +
theme(axis.line=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
#axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
#plot.background=element_blank(),
plot.margin = unit(c(0,0,0,0), units = "cm"))
sub_temp_plot_no_legend <- sub_temp_plot +
theme(legend.position="none",
plot.margin = unit(c(0,0,0,0), units = "cm"))
sub_temp_plot_legend <- cowplot::get_legend(sub_temp_plot)
full <- cowplot::plot_grid(admix_plot_no_legend, admix_legend,
elevation_plot_no_legend, admix_legend,
sub_temp_plot_no_legend, admix_legend,
ncol = 2, nrow = 3, align = "vh", rel_heights = c(1,.4,.5), rel_widths =c(1, .25), axis = 'l') #,  axis = 'l'
full
ggsave("plots/Figure_8_all_data_25m_filtered.pdf", width = 7.5, height = 5, useDingbats=FALSE)
elevation_plot <- ggplot(ass_stats_long %>% tidyr::spread(env_par, value)) +
aes(x = factor(isotype, levels = plot_order$samples), y = altitude, fill = sub_pop, alpha = filtered) + # alpha = filtered; reveals what data points are filtered out for stats
scale_fill_manual(values = ancestry.colours) +
geom_jitter(width = 0.1, shape = 21, size = 2.5) +
geom_segment(aes(x=0,xend=26,y=elv_means[1],yend=elv_means[1]), color = ancestry.colours["C"], size=0.75) +
geom_segment(aes(x=27,xend=35,y=elv_means[2],yend=elv_means[2]), color = ancestry.colours["F"], size=0.75) +
geom_segment(aes(x=36,xend=43,y=elv_means[3],yend=elv_means[3]), color = ancestry.colours["G"], size=0.75) +
theme_bw() +
labs(fill = "", x = "", y = "Elevation (m)") +
#ylim(800,1200) +
theme(axis.line=element_blank(),
axis.text.x = element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
#axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
#plot.background=element_blank(),
plot.margin = unit(c(0,0,0,0), units = "cm"))
elevation_plot_no_legend <- elevation_plot +
theme(legend.position="none",
plot.margin = unit(c(0,0,0,0), units = "cm"))
elevation_plot_legend <- cowplot::get_legend(elevation_plot)
sub_temp_plot <- ggplot(ass_stats_long %>% tidyr::spread(env_par, value)) +
aes(x = factor(isotype, levels = plot_order$samples), y = substrate_temperature, fill = sub_pop) + #, alpha = filtered
scale_fill_manual(values = ancestry.colours) +
geom_jitter(width = 0.1, shape = 21, size = 2.5) +
geom_segment(aes(x=0,xend=26,y=stemp_means[1],yend=stemp_means[1]), color = ancestry.colours["C"], size=0.75) +
geom_segment(aes(x=27,xend=36,y=stemp_means[2],yend=stemp_means[2]), color = ancestry.colours["F"], size=0.75) +
geom_segment(aes(x=37,xend=43,y=stemp_means[3],yend=stemp_means[3]), color = ancestry.colours["G"], size=0.75) +
theme_bw() +
labs(fill = "", x = "", y = "Sub. temperature (ºC)") +
theme(axis.line=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
#axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
#plot.background=element_blank(),
plot.margin = unit(c(0,0,0,0), units = "cm"))
sub_temp_plot_no_legend <- sub_temp_plot +
theme(legend.position="none",
plot.margin = unit(c(0,0,0,0), units = "cm"))
sub_temp_plot_legend <- cowplot::get_legend(sub_temp_plot)
full <- cowplot::plot_grid(admix_plot_no_legend, admix_legend,
elevation_plot_no_legend, admix_legend,
sub_temp_plot_no_legend, admix_legend,
ncol = 2, nrow = 3, align = "vh", rel_heights = c(1,.4,.5), rel_widths =c(1, .25), axis = 'l') #,  axis = 'l'
full
full_2 <- cowplot::plot_grid(admix_plot_no_legend, admix_legend, k7_box_plots,
ncol = 2, nrow = 2, align = "vh", rel_heights = c(1,1), rel_widths =c(1, .25), axis = 'l') #,  axis = 'l'
full_2
full_2 <- cowplot::plot_grid(admix_plot_no_legend, admix_legend, k7_box_plots,
ncol = 2, nrow = 2, align = "vh", rel_heights = c(1,1), rel_widths =c(1, .25), axis = 'lb') #,  axis = 'l'
full_2 <- cowplot::plot_grid(admix_plot_no_legend, admix_legend, k7_box_plots,
ncol = 2, nrow = 2, align = "vh", rel_heights = c(1,1), rel_widths =c(1, .25), axis = 'b') #,  axis = 'l'
full_2 <- cowplot::plot_grid(admix_plot_no_legend, admix_legend, k7_box_plots,
ncol = 2, nrow = 2, align = "vh", rel_heights = c(1,1), rel_widths =c(1, .25), axis = 'l') #,  axis = 'l'
full_2
full_2 <- cowplot::plot_grid(admix_plot_no_legend, admix_legend, k7_box_plots,
ncol = 2, nrow = 2, align = "vh", rel_heights = c(1,1), rel_widths =c(1, .25), axis = 'lr') #,  axis = 'l'
full_2 <- cowplot::plot_grid(admix_plot_no_legend, admix_legend, k7_box_plots,
ncol = 2, nrow = 2, align = "h", rel_heights = c(1,1), rel_widths =c(1, .25), axis = 'lr') #,  axis = 'l'
full_2
elevation_plot <- ggplot(ass_stats_long %>% tidyr::spread(env_par, value)) +
aes(x = factor(isotype, levels = plot_order$samples), y = altitude, fill = sub_pop, alpha = filtered) + # alpha = filtered; reveals what data points are filtered out for stats
scale_fill_manual(values = ancestry.colours) +
geom_jitter(width = 0.1, shape = 21, size = 2.5) +
geom_segment(aes(x=0,xend=26,y=elv_means[1],yend=elv_means[1]), color = ancestry.colours["C"], size=0.75) +
geom_segment(aes(x=27,xend=35,y=elv_means[2],yend=elv_means[2]), color = ancestry.colours["F"], size=0.75) +
geom_segment(aes(x=36,xend=43,y=elv_means[3],yend=elv_means[3]), color = ancestry.colours["G"], size=0.75) +
theme_bw() +
labs(fill = "", x = "", y = "Elevation (m)") +
#ylim(800,1200) +
theme(axis.line=element_blank(),
axis.text.x = element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
#axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
#plot.background=element_blank(),
# plot.margin = unit(c(0,0,0,0), units = "cm"))
elevation_plot_no_legend <- elevation_plot +
theme(legend.position="none",
#plot.margin = unit(c(0,0,0,0), units = "cm"))
elevation_plot_legend <- cowplot::get_legend(elevation_plot)
# plot sub temp
sub_temp_plot <- ggplot(ass_stats_long %>% tidyr::spread(env_par, value)) +
aes(x = factor(isotype, levels = plot_order$samples), y = substrate_temperature, fill = sub_pop) + #, alpha = filtered
scale_fill_manual(values = ancestry.colours) +
geom_jitter(width = 0.1, shape = 21, size = 2.5) +
geom_segment(aes(x=0,xend=26,y=stemp_means[1],yend=stemp_means[1]), color = ancestry.colours["C"], size=0.75) +
geom_segment(aes(x=27,xend=36,y=stemp_means[2],yend=stemp_means[2]), color = ancestry.colours["F"], size=0.75) +
geom_segment(aes(x=37,xend=43,y=stemp_means[3],yend=stemp_means[3]), color = ancestry.colours["G"], size=0.75) +
theme_bw() +
labs(fill = "", x = "", y = "Sub. temperature (ºC)") +
theme(axis.line=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
#axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
#plot.background=element_blank(),
#plot.margin = unit(c(0,0,0,0), units = "cm"))
sub_temp_plot_no_legend <- sub_temp_plot +
theme(legend.position="none",
# plot.margin = unit(c(0,0,0,0), units = "cm"))
sub_temp_plot_legend <- cowplot::get_legend(sub_temp_plot)
#4 add all together
full <- cowplot::plot_grid(admix_plot_no_legend, admix_legend,
elevation_plot_no_legend, admix_legend,
sub_temp_plot_no_legend, admix_legend,
ncol = 2, nrow = 3, align = "vh", rel_heights = c(1,.4,.5), rel_widths =c(1, .25), axis = 'l') #,  axis = 'l'
full_2 <- cowplot::plot_grid(admix_plot_no_legend, admix_legend, k7_box_plots,
ncol = 2, nrow = 2, align = "h", rel_heights = c(1,1), rel_widths =c(1, .25), axis = 'lr') #,  axis = 'l'
ggsave("plots/Figure_8_all_data_25m_filtered.pdf", width = 7.5, height = 5, useDingbats=FALSE)
#5 plot HI map file supplement
strain_pops <- dplyr::filter(long_admix_pops, frac_cluster == max_frac) %>%
dplyr::rename(strain=samples)
isolation_info <- df %>%
#dplyr::filter(reference_strain == 1)%>%
dplyr::select(strain = isotype, long = longitude, lat = latitude, state, country)%>%
dplyr::filter(lat != "None")%>%
dplyr::left_join(strain_pops,.,by="strain")%>%
dplyr::filter(!is.na(lat)) %>%
dplyr::distinct(strain, long, lat, .keep_all = TRUE)
isolation_info$lat <- as.numeric(isolation_info$lat)
isolation_info$long <- as.numeric(isolation_info$long)
dev.off()
world <- map_data("world")
world <- world[world$region != "Antarctica",] # intercourse antarctica
world_plot <- ggplot()+ geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="black", fill="#E6E6E6", size=0.25)+
scale_fill_manual(values = ancestry.colours,name = "Population")+
theme_map()+
geom_label_repel(aes(long, lat, label = strain, fill = cluster),
data=dplyr::filter(isolation_info, state == "Hawaii"),
fontface = 'bold', color = 'white',
segment.color = 'cyan')+
theme(legend.position = "none")+
coord_quickmap(xlim = c(-160,-155), ylim = c(19,22.3)) # coord_quickmap keeps correct aspect ratio
ggsave(world_plot, filename = "plots/K7_HW_MAP_Admix.pdf",
height = 10,
width = 10)
#6 plot global populations
# get admix
full_isolation_info <- df %>%
#dplyr::filter(reference_strain == 1) %>%
dplyr::select(isotype, long = longitude, lat = latitude, state, country) %>%
dplyr::filter(lat != "None") %>%
dplyr::left_join(.,admix,by="isotype") %>%
dplyr::distinct(isotype, long, lat, .keep_all = TRUE) %>%
dplyr::filter(!is.na(pop_assignment))
full_world_plot <- ggplot()+ geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="black", fill="#E6E6E6", size=0.25)+
scale_fill_manual(values = ancestry.colours,name = "Population")+
theme_map()+
geom_point(aes(long, lat, fill = pop_assignment),
data=full_isolation_info %>%
dplyr::filter(pop_assignment != "C"),
shape = 21, size = 3) +
geom_point(aes(long, lat, fill = pop_assignment),
data=full_isolation_info %>%
dplyr::filter(pop_assignment == "C"),
shape = 21, size = 3) +
theme(legend.position = "none") +
coord_quickmap()
ggsave(full_world_plot, filename = "plots/K7_world_MAP_Admix.pdf", useDingbats = F,
height = 7.5,
width = 7.5)
# 7 plot euro map
euro_plot <- ggplot()+ geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="black", fill="#E6E6E6", size=0.25)+
scale_fill_manual(values = ancestry.colours,name = "Population")+
theme_map()+
geom_point(aes(long, lat, fill = pop_assignment),
data=full_isolation_info %>%
dplyr::mutate(pop_assignment = factor(pop_assignment, level = c("A", "B", "D", "E", "C", "G", "F"))) %>%
dplyr::arrange(pop_assignment),
shape = 21, size = 2) +
theme(legend.position = "none") +
coord_quickmap(xlim = c(-10, 39), ylim = c(35, 71))
ggsave(euro_plot, filename = "plots/K7_euro_MAP_Admix.pdf", useDingbats = F,
height = 3,
width = 3)
# Calculate distnaces among c_labels in meters for thinning dataset
# generate all pairs
pair <- apply(ass_stats_long %>%
dplyr::filter(env_par == "altitude") %>%
dplyr::distinct(c_label, .keep_all = T), # only need to compare c_labels for stats, not worried about retaining isotype, pop_assignment info
2, combn, m=2)
# extract pairs to side by side for pair matirx [c(T,F),] = odd rows.
left_pair <- as.data.frame(pair[ c(TRUE,FALSE), ])
right_pair <- as.data.frame(pair[ !c(TRUE,FALSE), ])
colnames(right_pair) <- paste("r", colnames(right_pair), sep = "_")
# measure distances between all pairs
dist <- cbind(left_pair,right_pair) %>%
# assign lat and long back to numeric
dplyr::mutate(lat = as.double(as.character(lat)),
long = as.double(as.character(long)),
r_lat = as.double(as.character(r_lat)),
r_long = as.double(as.character(r_long)),
grid_num = as.double(as.character(grid_num)),
r_grid_num = as.double(as.character(r_grid_num)),
gridsect3 = ifelse(grid_num == 3 & r_grid_num == 3, TRUE, FALSE)) %>%
# force dplyr to perform distHaversine function on rows
dplyr::rowwise() %>%
dplyr::mutate(distance = distHaversine(c(long, lat), c(r_long, r_lat)),
under25meters = ifelse(distance < 25, TRUE, FALSE),
under50meters = ifelse(distance < 50, TRUE, FALSE),
under100meters = ifelse(distance < 100, TRUE, FALSE))
# Plot histogram of distances for all
ggplot(dist) +
aes(x = distance,  fill = under25meters) +
#geom_point()
geom_histogram(binwidth = 1000)
# extract all c_labels w/ c. elegans within 25 meters of another c_label w/ c. elegans
dist_filter <- dist %>%
dplyr::filter(under25meters == TRUE) %>%
dplyr::select(c_label, r_c_label) %>%
tidyr::gather() %>%
dplyr::distinct(value) %>%
dplyr::rename(c_label = value)
#Stats with populations F and G grouped as non-admixed populations and averages for isotypes on c_labels in <25 meter clusters
#perform multiple comparisions test using Dunn's test with pvalues adjusted with Bonferroni method.
ass_stats_cont_dist_filtered_1 <- ass_stats_cont %>%
dplyr::mutate(sub_pop2 = as.factor(ifelse(sub_pop %in% c("F","G"), "non_admixed", "Hawaiian Admixed"))) %>%
dplyr::mutate(filter_25m = ifelse(c_label %in% dist_filter$c_label, TRUE, FALSE),
kalopa =filter_box(ass_stats_cont$long, ass_stats_cont$lat, c(-155.454909,20.02578,-155.430115,20.049951)),
volcano_1 =filter_box(ass_stats_cont$long, ass_stats_cont$lat, c(-155.2243537309,19.4221224043,-155.2216236884,19.424155)),
volcano_2 =filter_box(ass_stats_cont$long, ass_stats_cont$lat, c(-155.222287312,19.424165,-155.2195572695,19.4259669944)),
maui = ifelse(isotype %in% c("QX1793", "QX1794"), TRUE, FALSE),
kauai = ifelse(isotype %in% c("XZ1514", "XZ1515", "XZ1516"), TRUE, FALSE),
geo_cluster = case_when(kalopa == T ~ "kalopa",
volcano_1 == T ~ "volcano_1",
volcano_2 == T ~ "volcano_2",
maui == T ~ "maui",
kauai == T ~ "kauai")) %>%
dplyr::group_by(env_par, sub_pop2, geo_cluster, filter_25m) %>%
dplyr::mutate(mean_value_25m = mean(value, na.rm = T)) %>%
dplyr::ungroup() %>%
dplyr::mutate(value_thinned = ifelse(filter_25m == TRUE, mean_value_25m, value))
ass_stats_cont_dist_filtered <- ass_stats_cont_dist_filtered_1 %>%
dplyr::distinct(env_par, sub_pop2, geo_cluster, value_thinned, .keep_all = T)
Dunn_list_dist_filtered <- list()
for (e in 1:length(unique(ass_stats_cont_dist_filtered$env_par))){
KM_df <- ass_stats_cont_dist_filtered %>%
dplyr::filter(env_par == (unique(ass_stats_cont_dist_filtered$env_par)[e]))
D_test <- dunnTest(KM_df$value_thinned ~ KM_df$sub_pop2, method = "bonferroni")
Dunn_list_dist_filtered[[unique(ass_stats_cont_dist_filtered$env_par)[e]]] <- D_test
}
Dunn_list_dist_filtered
elevation_p <- ggplot(ass_stats_cont_dist_filtered %>% tidyr::spread(env_par, value_thinned)) +
aes(x = sub_pop2, y = altitude) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(aes(x = sub_pop2, y = altitude, fill = sub_pop), width = 0.25, size = 3, shape = 21) +
theme_bw() +
scale_fill_manual(values=c(ancestry.colours)) +
labs(y = "Elevation (m)", x = "") +
theme_bw() +
theme(legend.position="none")
elevation_p
sub_temp_p <- ggplot(ass_stats_cont_dist_filtered %>% tidyr::spread(env_par, value)) +
aes(x = sub_pop2, y = substrate_temperature) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(aes(x = sub_pop2, y = substrate_temperature, fill = sub_pop), width = 0.25, size = 3, shape = 21) +
scale_fill_manual(values=c(ancestry.colours)) +
labs(y = "Substrate temperature (°C)", x = "") +
theme_bw() +
theme(legend.position="none")
sub_temp_p
k7_box_plots <- cowplot::plot_grid(elevation_p, sub_temp_p)
k7_box_plots
ggsave('plots/Hawaiian_population_association_box_plots_K=7_LD=8_25mfiltered_GFgrouped.pdf', width = 7.5, height = 5, useDingbats = F)
elevation_p <- ggplot(ass_stats_cont_dist_filtered %>% tidyr::spread(env_par, value_thinned)) +
aes(x = sub_pop2, y = altitude) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(aes(x = sub_pop2, y = altitude, fill = sub_pop), width = 0.25, size = 3, shape = 21) +
theme_bw() +
scale_fill_manual(values=c(ancestry.colours)) +
labs(y = "Elevation (m)", x = "") +
theme_bw() +
theme(legend.position="none") +
theme(plot.margin = unit(c(0,0,0,0), units = "cm"))
elevation_p
elevation_p <- ggplot(ass_stats_cont_dist_filtered %>% tidyr::spread(env_par, value_thinned)) +
aes(x = sub_pop2, y = altitude) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(aes(x = sub_pop2, y = altitude, fill = sub_pop), width = 0.25, size = 3, shape = 21) +
theme_bw() +
scale_fill_manual(values=c(ancestry.colours)) +
labs(y = "Elevation (m)", x = "") +
theme_bw() +
theme(legend.position="none") +
theme(plot.margin = unit(c(0,0,0,0), units = "cm"))
elevation_p
sub_temp_p <- ggplot(ass_stats_cont_dist_filtered %>% tidyr::spread(env_par, value_thinned)) +
aes(x = sub_pop2, y = substrate_temperature) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(aes(x = sub_pop2, y = substrate_temperature, fill = sub_pop), width = 0.25, size = 3, shape = 21) +
scale_fill_manual(values=c(ancestry.colours)) +
labs(y = "Substrate temperature (°C)", x = "") +
theme_bw() +
theme(legend.position="none")  +
theme(plot.margin = unit(c(0,0,0,0), units = "cm"))
sub_temp_p
k7_box_plots <- cowplot::plot_grid(elevation_p, sub_temp_p)
k7_box_plots
sub_temp_p <- ggplot(ass_stats_cont_dist_filtered %>% tidyr::spread(env_par, value_thinned)) +
aes(x = sub_pop2, y = substrate_temperature) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(aes(x = sub_pop2, y = substrate_temperature, fill = sub_pop), width = 0.25, size = 3, shape = 21) +
scale_fill_manual(values=c(ancestry.colours)) +
labs(y = "Substrate temperature (°C)", x = "") +
theme_bw() +
theme(legend.position="none",
plot.margin = unit(c(0,0,0,0), units = "cm"))
sub_temp_p
